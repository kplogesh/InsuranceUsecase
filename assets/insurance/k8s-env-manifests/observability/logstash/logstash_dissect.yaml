apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
  namespace: default
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    xpack.monitoring.enabled: false
  logstash.conf: |
    # all input will come from filebeat, no local logs
    input 
    {
      beats {
        port => 5044
      }
    }

    filter 
    {
      if [fields][filename] == "trxAudit.log" 
      {
          clone 
          {
            clones => ["cloned"]
          }          
          dissect 
          {
          mapping => { "message" => '{"auditType":"%{status}","timestamp":"%{tempcreationdate}","loggerData":{"loggerName":"%{nativeURL}","logMessage":"%{?logmessage}"},"docToBeLogged":%{resPayload},"customHeaders":{"x-transaction-id":"%{x-transaction-id}","x-account-id":"%{x-account-id}","x-consumer-channel":"%{x-consumer-channel}","x-correlation-id":"%{x-correlation-id}"},"serverName":"%{tempservername}","serverPort":"%{tempserverport}"}'
                     }
          }         
          ruby
          {
            code => '
              event.set("source",event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").first);
              event.set("target",event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").last);
              
              if event.get("status").include?("START") then
                event.set("id",event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").first);
                event.set("mainstat",(event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").first).split(".").last);
                event.set("title",event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").first);
              else
                event.set("id",event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").last);
                event.set("mainstat",(event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").last).split(".").last);
                event.set("title",event.get("x-transaction-id")+"_"+event.get("nativeURL").split("|||").last);                
              end
                
            '
          }
          mutate 
          {
            gsub => [
                   "tempservername", "\"", "",
                   "tempservername", "\}", ""
                    ]
          }
          mutate 
          {
            strip => [ "tempservername" ]
          }
                 
          date 
          {
            match => [ "tempcreationdate", "YYYY-MM-dd HH:mm:ss.SSS" ]
            target => "creationDate"
          }                              
         
          mutate 
          {
            add_field => {"serverName" => "%{tempservername}:%{tempserverport}" }
            add_field => {"subtitle" => "%{tempservername}" }
            remove_field => ["tempservername", "tempserverport", "message", "log", "host", "agent", "tempcreationdate", "input", "ecs"]
          }
          
          if [type] == "cloned" 
          {
            prune 
            {
                blacklist_names => ["@version", "title", "nativeURL", "status", "resPayload", "tags", "title", "ecs", "@timestamp","serverName","mainstat"]
            }
          }       
          else
          {
            prune 
            {
                blacklist_names => ["source", "target", "tags", "@version"]
            }          
          }  
  
      }     
    }
   
    output 
    {

        if [fields][filename] == "trxAudit.log"
        {
           if [type] == "cloned" 
           {
                elasticsearch  
                {              
                    hosts => [ "${ELASTICSEARCH_HOSTS}" ]
                    user => "${ELASTICSEARCH_USER}"
                    password => "${ELASTICSEARCH_PASSWORD}"
                    index => "edgefields"
                }

           }
           else
           {   
                elasticsearch  
                {              
                    hosts => [ "${ELASTICSEARCH_HOSTS}" ]
                    user => "${ELASTICSEARCH_USER}"
                    password => "${ELASTICSEARCH_PASSWORD}"
                    index => "customlogger_transactionalevents"
                }

           }
           stdout { codec => rubydebug }
        } 
        else 
        {
                elasticsearch  
                {
                      hosts => [ "${ELASTICSEARCH_HOSTS}" ]
                      user => "${ELASTICSEARCH_USER}"
                      password => "${ELASTICSEARCH_PASSWORD}"
                      #index => "logstash-noapplabel_%{[@metadata][beat]}-%{+YYYY.MM.dd}"
                      index => "logstash-noapplabel-%{[@metadata][beat]}"
                }
        }
                        
    }
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: logstash
  name: logstash
spec:
  containers:
  - image: docker.elastic.co/logstash/logstash:7.13.0
    name: logstash
    ports:
    - containerPort: 5044
    env:
    - name: ELASTICSEARCH_HOSTS
      value: "http://api-gateway.insurance:9240"
    - name: ELASTICSEARCH_USER
      value: "elastic"
    - name: ELASTICSEARCH_PASSWORD
      value: "changeme"
    resources: {}
    volumeMounts:
    - name: config-volume
      mountPath: /usr/share/logstash/config
    - name: logstash-pipeline-volume
      mountPath: /usr/share/logstash/pipeline
  restartPolicy: OnFailure
  volumes:
  - name: config-volume
    configMap:
      name: logstash-configmap
      items:
        - key: logstash.yml
          path: logstash.yml
  - name: logstash-pipeline-volume
    configMap:
      name: logstash-configmap
      items:
        - key: logstash.conf
          path: logstash.conf
---
kind: Service
apiVersion: v1
metadata:
  name: logstash-service
  namespace: default
spec:
  selector:
    app: logstash
  ports:
  - protocol: TCP
    port: 5044
    targetPort: 5044
  type: ClusterIP