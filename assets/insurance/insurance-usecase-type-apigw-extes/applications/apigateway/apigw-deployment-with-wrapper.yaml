apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway-deployment-external-es
  labels:
    app: api-gateway-deployment-external-es
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway-deployment-external-es
  template:
    metadata:
      labels:
        app: api-gateway-deployment-external-es
    spec:
      securityContext:
        fsGroup: 1724
        runAsUser: 1724
      initContainers:
      - name: increase-vm-max-map
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
          runAsUser: 0    
      - name: increase-fd-ulimit
        image: busybox:latest
        command: ["sh", "-c", "ulimit -n 65536"]
        securityContext:
          privileged: true
      containers:
      - name: api-gateway-deployment-external-es
        image: sagcr.azurecr.io/apigateway:10.15
        imagePullPolicy: IfNotPresent       
        securityContext:
          runAsUser: 1724
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "6Gi" 
        ports:
        - containerPort: 5555
          name: 5555tcp01
          protocol: TCP
        - containerPort: 9072
          name: 9072tcp01
          protocol: TCP
        - containerPort: 5543
          name: 5543tcp01
          protocol: TCP
        - containerPort: 9073
          name: 9073tcp01
          protocol: TCP
        # Liveness probe to check whether container is active. Restart happens when liveness probe fails.
        livenessProbe:
          failureThreshold: 20
          initialDelaySeconds: 60
          periodSeconds: 30
          successThreshold: 1
          tcpSocket:
            port: 5555
          timeoutSeconds: 2
        # Readiness probe to check whether pod is ready to serve the requests. Traffic will not be injected unless readiness probes passes.
        readinessProbe:
          failureThreshold: 10
          httpGet:
            path: /rest/apigateway/health
            port: 5555
            scheme: HTTP
          initialDelaySeconds: 100
          periodSeconds: 100
          successThreshold: 1
          timeoutSeconds: 10    
        volumeMounts:
        - name: apigw-license
          mountPath: /opt/softwareag/IntegrationServer/instances/default/config/licenseKey.xml
          subPath: apigw-licensekey.xml
          readOnly: false
        - name: application-properties
          mountPath: /opt/softwareag/IntegrationServer/application.properties
          subPath: application.properties     
        - name: config-sources
          mountPath: /opt/softwareag/IntegrationServer/instances/default/packages/WmAPIGateway/resources/configuration/config-sources.yml
          subPath: config-sources.yml       
          readOnly: false
        - name: system-settings
          mountPath: /opt/softwareag/IntegrationServer/instances/default/packages/WmAPIGateway/resources/configuration/system-settings.yml
          subPath: system-settings.yml        
          readOnly: false
        - name: custom-setenv
          mountPath: /opt/softwareag/profiles/IS_default/bin/startup.sh
          subPath: startup.sh    
          readOnly: false  
        - name: custom-wrapper
          mountPath: /opt/softwareag/profiles/IS_default/configuration/custom_wrapper.conf
          subPath: custom_wrapper.conf
          readOnly: false   
        - name: setenv
          mountPath: /opt/softwareag/profiles/IS_default/bin/custom_setenv.sh
          subPath: custom_setenv.sh
          readOnly: false  
        - name: wrapper
          mountPath: /opt/softwareag/profiles/IS_default/configuration/wrapper.conf
          subPath: wrapper.conf
          readOnly: false            
      volumes:
      - name: apigw-license
        configMap:
          name: apigw-license-config
          items:
          - key: apigw-licensekey.xml
            path: apigw-licensekey.xml
      - name: application-properties
        configMap:
          name: apigw-application-config        
      - name: config-sources
        configMap:
          name: apigw-application-config  
          defaultMode: 0777
      - name: system-settings
        configMap:
          name: apigw-application-config    
          defaultMode: 0777   
      - name: custom-setenv
        configMap:
          name: apigw-application-config   
          defaultMode: 0777
      - name: custom-wrapper
        configMap:
          name: apigw-application-config   
          defaultMode: 0600    
      - name: setenv
        configMap:  
          name: apigw-application-config   
          defaultMode: 0777 
      - name: wrapper
        configMap:  
          name: apigw-application-config   
          defaultMode: 0777 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: apigw-license-config
  namespace: insurance
data:
    apigw-licensekey.xml: |
      <?xml version="1.0" encoding="US-ASCII"?>
      <SoftwareAG_License>
      <Component Id="SalesInfo">
      <SerialNumber>0000709316</SerialNumber>
      <LicenseKey>E339DC97D75149D3C913928B4B4CDBF8</LicenseKey>
      <CustomerID>Software AG for Solution Book Internal USE ONLY</CustomerID>
      <CustomerName>3150000</CustomerName>
      <ContractDetails>Internal Keys</ContractDetails>
      <ContractPosNumber>10</ContractPosNumber>
      <LicenseTypeDetails>Internal</LicenseTypeDetails>
      <AutoCallHome>No</AutoCallHome>
      </Component>
      <Component Id="ProductInfo">
      <ExpirationDate>2023/10/31</ExpirationDate>
      <OS>win, SunOS, Linux, Linux S390, AIX, HP-UX, MacOS</OS>
      <ProductCode>YAIAA</ProductCode>
      <ProductID/>
      <ProductName>API Gateway Advanced Edition</ProductName>
      <ProductVersion>10.7</ProductVersion>
      <Usage/>
      <RenewalDate/>
      <HigherLevPosNr/>
      <HigherLevProdCode/>
      <HigherLevProdName/>
      </Component>
      <Component Id="Integration Server">
      <ProductCode>YAI</ProductCode>
      <ProductVersion>10.7</ProductVersion>
      <ConcurrentSessions>Unlimited</ConcurrentSessions>
      <Clustering>yes</Clustering>
      <PubSub>no</PubSub>
      <ART>no</ART>
      <RemoteInvoke>yes</RemoteInvoke>
      <GuaranteedDelivery>no</GuaranteedDelivery>
      <SecurityAuditing>yes</SecurityAuditing>
      <DistributedCache>yes</DistributedCache>
      <EnterpriseGateway>yes</EnterpriseGateway>
      <Microservices>yes</Microservices>
      </Component>
      <Component Id="APIGateway">
      <PolicyManagementThreatProtection>yes</PolicyManagementThreatProtection>
      <PolicyManagementGateway>yes</PolicyManagementGateway>
      <ApplicationManagement>yes</ApplicationManagement>
      <APIManagement>yes</APIManagement>
      <AppMesh>yes</AppMesh>
      </Component>
      <Component Id="LicenseInfo">
      <PriceUnit>CoreD</PriceUnit>
      <PriceQuantity>16</PriceQuantity>
      <TypeOfInstallation/>
      <LicenseType/>
      <ExtendedRights/>
      <LicenseVersion>1.2</LicenseVersion>
      <Metering>MNO</Metering>
      </Component>
      </SoftwareAG_License>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: apigw-application-config
  namespace: insurance
data:
  wrapper.conf: |
    #encoding=UTF-8
    # Configuration files must begin with a line specifying the encoding
    #  of the the file.

    #********************************************************************
    # Wrapper License Properties (Ignored by Community Edition)
    #********************************************************************
    # Professional and Standard Editions of the Wrapper require a valid
    #  License Key to start.  Licenses can be purchased or a trial license
    #  requested on the following pages:
    # http://wrapper.tanukisoftware.com/purchase
    # http://wrapper.tanukisoftware.com/trial

    # Include file problems can be debugged by leaving only one '#'
    #  at the beginning of the following line:
    #include.debug

    #*******************************************************************
    # Environment variables used
    #*******************************************************************
    set.OSGI_INSTALL_AREA=/opt/softwareag/profiles/IS_default
    set.OSGI_CONFIGURATION_AREA=%OSGI_INSTALL_AREA%%WRAPPER_FILE_SEPARATOR%configuration
    set.JAVA_BOOT_CLASSPATH=/opt/softwareag/common/runtime/bundles/platform/eclipse/plugins/com.softwareag.platform.jaas.proxy_10.15.0.0000-0574.jar:/opt/softwareag/common/runtime/bundles/platform/eclipse/plugins/com.softwareag.platform.logging.jul.proxy_10.15.0.0000-0574.jar
    set.JAVA_SYSTEM_CLASSPATH=/opt/softwareag/common/runtime/bundles/platform/eclipse/plugins/com.softwareag.platform.bootstrap_10.15.0.0000-0574.jar:/opt/softwareag/common/runtime/bundles/platform/eclipse/plugins/org.eclipse.equinox.launcher_1.5.300.v20190213-1655.jar
    set.default.LD_LIBRARY_PATH=/opt/softwareag/jvm/jvm/lib/server:/opt/softwareag/jvm/jvm/lib:%LD_LIBRARY_PATH%

    set.default.DEFAULT_PATH=/opt/softwareag/IntegrationServer/instances/../../common%WRAPPER_FILE_SEPARATOR%security/ssx/lib%WRAPPER_PATH_SEPARATOR%%PATH%
    set.PATH=%DEFAULT_PATH%

    # The Wrapper will look for either of the following optional files for a
    #  valid License Key.  License Key properties can optionally be included
    #  directly in this configuration file.
    #include %OSGI_INSTALL_AREA%/configuration/wrapper-license.conf

    # The following property will output information about which License Key(s)
    #  are being found, and can aid in resolving any licensing problems.
    #wrapper.license.debug=TRUE

    #********************************************************************
    # Wrapper Localization
    #********************************************************************
    # Specify the language and locale which the Wrapper should use.
    #wrapper.lang=en_US # en_US or ja_JP

    # Specify the location of the language resource files (*.mo).
    wrapper.lang.folder=../lang

    #********************************************************************
    # Wrapper Java Properties
    #********************************************************************
    # Java Application
    wrapper.java.command=/opt/softwareag/jvm/jvm/bin/java

    # Tell the Wrapper to log the full generated Java command line.
    #wrapper.java.command.loglevel=INFO

    # Java Main class.  This class must implement the WrapperListener interface
    #  or guarantee that the WrapperManager class is initialized.  Helper
    #  classes are provided to do this for you.
    #  See the following page for details:
    #  http://wrapper.tanukisoftware.com/doc/english/integrate.html
    wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperStartStopApp

    # Java Classpath (include wrapper.jar)  Add class path elements as
    #  needed starting from 1
    wrapper.java.classpath.1=/opt/softwareag/IntegrationServer/instances/../../common/lib/tw-3.5.50%WRAPPER_FILE_SEPARATOR%wrapper.jar
    wrapper.java.classpath.2=%JAVA_SYSTEM_CLASSPATH%

    # Java Library Path (location of Wrapper.DLL or libwrapper.so)
    wrapper.java.library.path.1=/opt/softwareag/IntegrationServer/instances/../../common/lib/tw-3.5.50
    wrapper.java.library.path.2=/opt/softwareag/IntegrationServer/instances/../../common%WRAPPER_FILE_SEPARATOR%lib
    wrapper.java.library.path.3=/opt/softwareag/IntegrationServer/instances/../../common%WRAPPER_FILE_SEPARATOR%security/ssx/lib

    # Java Bits.  On applicable platforms, tells the JVM to run in 32 or 64-bit mode.
    #wrapper.java.additional.auto_bits=TRUE

    # Java Additional Parameters
    wrapper.java.additional.1=-Dosgi.install.area="%OSGI_INSTALL_AREA%"
    wrapper.java.additional.1.stripquotes=TRUE
    wrapper.java.additional.2=-Declipse.ignoreApp=true
    wrapper.java.additional.3=-Dosgi.noShutdown=true
    wrapper.java.additional.4=-Dlog4j.configurationFile="/opt/softwareag/profiles/IS_default/configuration/logging/log4j2.properties"
    wrapper.java.additional.4.stripquotes=TRUE
    wrapper.java.additional.5=-Xbootclasspath/a:"%JAVA_BOOT_CLASSPATH%":/opt/softwareag/common/runtime/bundles/platform/eclipse/plugins/com.softwareag.platform.logging.jul.proxy_10.15.0.0000-0574.jar
    wrapper.java.additional.5.stripquotes=TRUE
    wrapper.java.additional.6=-Djava.io.tmpdir="%OSGI_INSTALL_AREA%/workspace/temp"
    wrapper.java.additional.6.stripquotes=TRUE
    wrapper.java.additional.7=-Dlog4j2.disable.jmx=true
    wrapper.java.additional.8=-Djava.util.logging.manager=com.softwareag.platform.jul.proxy.ProxyLogManager
    wrapper.java.additional.9=-DLog4jContextSelector=org.apache.logging.log4j.core.selector.BasicContextSelector
    wrapper.java.pidfile=%OSGI_INSTALL_AREA%/bin/.lock
    wrapper.java.additional.120=-DjsonMaxStringLength=200000000
    wrapper.anchorfile=

    # Initial Java Heap Size (in MB)
    wrapper.java.initmemory=256

    # Maximum Java Heap Size (in MB)
    wrapper.java.maxmemory=512

    #********************************************************************
    # Wrapper Application parameters.
    #********************************************************************
    # To startup call Main.main()
    # Pass 2 parameters: "-configuration", %OSGI_CONFIGURATION_AREA%
    wrapper.app.parameter.1=org.eclipse.equinox.launcher.Main
    wrapper.app.parameter.2=2
    wrapper.app.parameter.3=-configuration
    wrapper.app.parameter.4="%OSGI_CONFIGURATION_AREA%"
    wrapper.app.parameter.4.stripquotes=TRUE

    # TODO All products must rebuild their Tanuki license before startup via Main can be replaced by Bootstrap
    # To startup call Bootstrap.main()
    # Pass 3 arguments: "startup", "-configuration", %OSGI_CONFIGURATION_AREA%
    #wrapper.app.parameter.1=com.softwareag.platform.bootstrap.Bootstrap
    #wrapper.app.parameter.2=3
    #wrapper.app.parameter.3=startup
    #wrapper.app.parameter.4=-configuration
    #wrapper.app.parameter.5="%OSGI_CONFIGURATION_AREA%"
    #wrapper.app.parameter.5.stripquotes=TRUE

    # Reserved for use by OSGi products via custom_wrapper.conf.
    # wrapper.app.parameter.6=
    # ...
    # wrapper.app.parameter.29=

    # To shutdown call Bootstrap.main()
    # Do not wait for all daemon threads to die.
    # Pass 1 argument: "shutdown".
    wrapper.app.parameter.30=com.softwareag.platform.bootstrap.Bootstrap
    wrapper.app.parameter.31=FALSE
    wrapper.app.parameter.32=1
    wrapper.app.parameter.33=shutdown

    # OGI-502 No exit code returned when OSGi framework requires a restart
    # Handle the Equinox restart return code(23) and do a restart of the platform
    wrapper.on_exit.23=RESTART

    #********************************************************************
    # Wrapper Timeout Properties
    #********************************************************************
    # Once the wrapper issues a graceful kill to the JVM process it will
    # wait for he JVM to exit and than do a forced kill of the process.
    wrapper.shutdown.timeout=%SHUTDOWN_TIMEOUT%

    #Number of seconds to allow between the time that the JVM reports that
    #it is stopped and the time that the JVM process actually terminates.
    #Setting this property value to "0" (zero) means never time out.
    wrapper.jvm_exit.timeout=%JVM_EXIT_TIMEOUT%

    #********************************************************************
    # Wrapper Logging Properties
    #********************************************************************
    # Enables Debug output from the Wrapper.
    # wrapper.debug=TRUE

    # Format of output for the console.  (See docs for formats)
    wrapper.console.format=PM

    # Log Level for console output.  (See docs for log levels)
    wrapper.console.loglevel=INFO

    # Log file to use for wrapper output logging.
    wrapper.logfile=%OSGI_INSTALL_AREA%/logs/wrapper.log

    # Format of output for the log file.  (See docs for formats)
    wrapper.logfile.format=LPTM

    # Log Level for log file output.  (See docs for log levels)
    wrapper.logfile.loglevel=INFO

    # Maximum size that the log file will be allowed to grow to before
    #  the log is rolled. Size is specified in bytes.  The default value
    #  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
    #  'm' (mb) suffix.  For example: 10m = 10 megabytes.
    wrapper.logfile.maxsize=10m

    # Maximum number of rolled log files which will be allowed before old
    #  files are deleted.  The default value of 0 implies no limit.
    wrapper.logfile.maxfiles=5

    # Log Level for sys/event log output.  (See docs for log levels)
    wrapper.syslog.loglevel=NONE

    #********************************************************************
    # Wrapper General Properties
    #********************************************************************
    # Allow for the use of non-contiguous numbered properties
    wrapper.ignore_sequence_gaps=TRUE

    # Do not start if the pid file already exists.
    wrapper.pidfile.strict=TRUE

    # Title to use when running as a console
    wrapper.console.title=Software AG Integration Server 10.15 (default)

    #********************************************************************
    # Wrapper Windows Service Properties
    #********************************************************************
    # WARNING - Do not modify any of these properties when an application
    #  using this configuration file has been installed as a service.
    #  Please uninstall the service before modifying this section.  The
    #  service can then be reinstalled.

    # Name of the service
    wrapper.ntservice.name=sagis1015

    # Display name of the service
    wrapper.ntservice.displayname=Software AG Integration Server 10.15 (default)

    # Description of the service
    wrapper.ntservice.description=Software AG webMethods Integration Server 10.15

    # Service dependencies.  Add dependencies as needed starting from 1
    wrapper.ntservice.dependency.1=

    # Mode in which the service is installed.  AUTO_START, DELAY_START or DEMAND_START
    wrapper.ntservice.starttype=AUTO_START

    # Allow the service to interact with the desktop (Windows NT/2000/XP only).
    wrapper.ntservice.interactive=FALSE

    #********************************************************************
    # Custom Wrapper configuration file
    #********************************************************************
    #include %OSGI_INSTALL_AREA%/configuration/custom_wrapper.conf
  custom_setenv.sh: |
    # ---- SET INITIALLY BY THE INSTALLER ----
    #########################################################
    #                                                       #
    # Following parameters should not be modified by users. #
    #                                                       #
    #########################################################
    OSGI_INSTALL_AREA=/opt/softwareag/profiles/IS_default
    OSGI_CONFIGURATION_AREA=$OSGI_INSTALL_AREA/configuration
    JAVA_CUSTOM_OPTS="-DjsonMaxStringLength=200000000"
    echo "******* $JAVA_CUSTOM_OPTS"
    ECLIPSE_IGNORE_APP=true
    JAVA_OPTS="$JAVA_OPTS -DjsonMaxStringLength=200000000"
    ########################################################################
    # The environment variable USE_WRAPPER changes the way profile instance
    # is started.
    # Values:
    #     no    - profile instance is started by pure Java call
    #     yes   - Tanuki Wrapper is used to launch the profile instance
    if [ -z "$USE_WRAPPER" ]; then
      USE_WRAPPER=yes
    fi

    #########################################################################
    # The environment variable STARTUP_MODE changes the default startup mode
    # of this profile instance if it is installed as a system service.
    # Values:
    #     service    - start the service, if any
    #     console    - start as a regular process, but only if
    #                  the service is not already running
    if [ -z "$STARTUP_MODE" ]; then
      STARTUP_MODE=service
    fi

    ##############################################################################
    # The environment variable BLOCKING_SCRIPT changes behavior of startup script
    # when STARTUP_MODE is set to "console"
    # Values:
    #     no    - startup script is non-blocking
    #     yes   - startup script is blocking
    if [ -z "$BLOCKING_SCRIPT" ]; then
      BLOCKING_SCRIPT=no
    fi
  custom_wrapper.conf: |
    #encoding=UTF-8
    #To prevent conflicts with properties added by Software AG, add your custom properties with 400 series numbers or higher unless otherwise instructed by Software AG.
    wrapper.app.parameter.2=4
    wrapper.app.parameter.5=-service
    wrapper.app.parameter.6=sagis1015
    wrapper.java.additional.100=-server
    wrapper.java.additional.101=-Dorg.apache.xml.dtm.DTMManager=org.apache.xml.dtm.ref.DTMManagerDefault
    wrapper.java.additional.102=-Djavax.xml.xpath.XPathFactory:http://java.sun.com/jaxp/xpath/dom=com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl
    wrapper.java.additional.103=-Dcom.webmethods.sc.auditing.Use80TableFormat=true
    wrapper.java.additional.104=-Dsun.lang.ClassLoader.allowArraySyntax=true
    wrapper.java.additional.105=-Djava.security.properties=config/security/webm_override_java.security
    wrapper.java.additional.201=-DWM_HOME=/opt/softwareag/IntegrationServer/instances/../..
    wrapper.java.additional.202=-Dwatt.server.prepend.classes=
    wrapper.java.additional.203=-Dwatt.server.append.classes=
    wrapper.java.additional.204=-Dlog4j.configurationFile="/opt/softwareag/profiles/IS_default/configuration/logging/log4j2.properties,.tc.custom.log4j2.properties"
    wrapper.java.additional.204.stripquotes=TRUE
    wrapper.java.additional.301=-Dorg.tanukisoftware.wrapper.WrapperStartStopApp.passthroughMode=START
    wrapper.java.additional.302=-Djava.awt.headless=true
    wrapper.java.additional.303=-DLog4jContextSelector=org.apache.logging.log4j.core.selector.BasicContextSelector
    wrapper.java.additional.304=-Djdk.security.auth.login.useCachedLoginModules=true
    wrapper.java.classpath.3=/opt/softwareag/IntegrationServer/instances/../../common/lib/wm-converters.jar
    wrapper.java.initmemory=2048
    wrapper.java.library.path.11=/opt/softwareag/IntegrationServer/instances/default/lib
    wrapper.java.library.path.append_system_path=TRUE
    wrapper.java.maxmemory=4096
    wrapper.jvm_exit.timeout=300
    wrapper.on_exit.42=RESTART
    wrapper.ping.timeout=300
    wrapper.restart.reload_configuration=TRUE
    wrapper.shutdown.timeout=300
    wrapper.single_invocation=TRUE
    wrapper.working.dir=/opt/softwareag/IntegrationServer/instances/default
    # wrapper.java.additional.900=-DjsonMaxStringLength=200000000
    wrapper.java.additional.999=-Dtest.cluster.withDerby=true
  startup.sh: |
    #!/bin/sh
    DIRNAME=`dirname $0`
    THIS=`basename $0`

    LOG() {
      echo "[$THIS] $*"
    }

    # Read the configuration
    . $DIRNAME/setenv.sh

    if [ -n "$WORK_DIR" ]; then
      LOG "Changing working directory to $WORK_DIR"
      cd $WORK_DIR
    fi

    # Check the anchor
    PID=`cat $WRAPPER_ANCHOR 2>/dev/null`
    if ps -p$PID 1>/dev/null 2>/dev/null; then
      LOG "Platform is already running with PID $PID"
      exit 0
    fi

    # Double check using the daemon, just to be sure
    $WRAPPER_SCRIPT status 1>/dev/null
    if [ $? -eq 0 ]; then
      LOG "Platform daemon is already running"
      exit 0
    fi

    # Cleanup the marker of a previous failed shutdown
    if [ -r "$SHUTDOWN_ANCHOR" ]; then
        rm "$SHUTDOWN_ANCHOR"
    fi

    # Setup system out capture in case it is used
    if [ ! -d "/path/to/dir" ]; then
        mkdir -p $OSGI_INSTALL_AREA/logs
    fi
    LOGFILE=$OSGI_INSTALL_AREA/logs/$THIS.out

    if [ "$USE_WRAPPER" = "yes" ]; then
      if [ "$STARTUP_MODE" = "console" ]; then
        START_CMD="$WRAPPER_SCRIPT console -- $*"

        if [ "$BLOCKING_SCRIPT" = "yes" ]; then
          LOG "Starting a plain Tanuki process..."
          JAVA_SYSPROPS="$JAVA_SYSPROPS -DjsonMaxStringLength=200000000"
          echo $JAVA_SYSPROPS
          exec $START_CMD
          # exec $START_CMD "-DjsonMaxStringLength=200000000"
        else
          LOG "Starting a Tanuki background job..."
          # TODO Who will rotate the $LOGFILE to prevent runaway disk usage?
          nohup $START_CMD > $LOGFILE 2>&1 &
        fi
      else
        LOG "Starting a Tanuki daemon..."
        $WRAPPER_SCRIPT start -- $*
      fi
    else
      JAVA_SYSPROPS="$JAVA_SYSPROPS -Dcom.softwareag.platform.bootstrap.anchor=$WRAPPER_ANCHOR"

      START_CMD="$JAVA_EXEC $JAVA_MEMSET $JAVA_PERM_SIZESET -server $DEBUG_ARG $JAVA_OPTS $JAVA_SYSPROPS -Xbootclasspath/a:$JAVA_BOOT_CLASSPATH -cp $JAVA_SYSTEM_CLASSPATH com.softwareag.platform.bootstrap.Bootstrap startup $*"

      if [ "$BLOCKING_SCRIPT" = "yes" ]; then
        LOG "Starting a plain Java process..."
        exec $START_CMD
      else
        LOG "Starting a Java background job..."
        # TODO Who will rotate the $LOGFILE to prevent runaway disk usage?
        nohup $START_CMD > $LOGFILE 2>&1 &
      fi
    fi
  application.properties: |
    settings.watt.server.compile=/opt/softwareag/IntegrationServer/docker/../../jvm/jvm/bin/javac -classpath {0} -d {1} {2}
    settings.watt.server.threadPool=500
    settings.watt.server.threadPoolMin=200
    settings.watt.server.control.serverThreadThreshold=20
    settings.watt.server.serverlogFilesToKeep=100
    settings.watt.server.serverlogRotateSize=10MB
    settings.watt.server.audit.logFilesToKeep=100
    settings.watt.server.audit.logRotateSize=10MB
    settings.watt.server.serverlogFilesToKeep=30
    settings.watt.server.serverlogRotateSize=10MB
    settings.watt.server.audit.logFilesToKeep=100
    settings.watt.server.audit.logRotateSize=10MB
    settings.watt.debug.level=Info
  config-sources.yml: |
    ######################## Master configuration ############################
    #
    # This is the master configuration file which contains the configuration 
    # source definitions.
    #
    # You can find the full configuration reference here:
    # http://techcommunity.softwareag.com/pwiki/-/wiki/Main/Starting+API+Gateway+using+externalized+configurations
    #
    #=======================  Sources configuration ==========================

    sources:
    - type: YAML
      allowEdit: true
      properties:
        #Provide the appropriate filename
        location: /opt/softwareag/IntegrationServer/instances/default/packages/WmAPIGateway/resources/configuration/system-settings.yml    
  system-settings.yml: |
    ---
    apigw:
      analyticsDataStore:
        tenantId: default
        hosts: "elasticsearch-0.elasticsearch:9200,elasticsearch-1.elasticsearch:9200,elasticsearch-2.elasticsearch:9200"
        http:
          username: analyticsdatastore
          password: changeme
          keepAlive: true
          keepAliveMaxConnections: 60
          keepAliveMaxConnectionsPerRoute: 20
          connectionTimeout: 2000
          socketTimeout: 40000
          maxRetryTimeout: 200000
        https:
          enabled: false
          keystoreFilepath: C:/softwares/analyticsdatastore/config/demouser-keystore.jks
          truststoreFilepath: C:/softwares/analyticsdatastore/config/truststore.jks
          keystoreAlias: cn=demouser
          keystorePassword: 6572b9b06156a0ff778c
          truststorePassword: 2c0820e69e7dd5356576
          enforceHostnameVerification: false
        sniff:
          enable: false
          timeInterval: 70000
        outboundProxy:
          enabled: false
          alias: somealias
        clientHttpResponseSize: 200    
      elasticsearch:
        tenantId: default
        hosts: "elasticsearch-0.elasticsearch:9200,elasticsearch-1.elasticsearch:9200,elasticsearch-2.elasticsearch:9200"
        autostart: false
        http:
          keepAlive: true
          keepAliveMaxConnections: 50
          keepAliveMaxConnectionsPerRoute: 15
          connectionTimeout: 10000
          socketTimeout: 30000
          maxRetryTimeout: 100000
          username: "elastic"      
          password: "changeme"             
        https:
          enabled: false
        sniff:
          enable: false
          timeInterval: 60000
        clientHttpResponseSize: 100
      kibana:
        dashboardInstance: http://kibana-0.kibana.insurance.svc.cluster.local:5601
        autostart: false        
      cluster:
        aware: false
        name: APIGatewayCluster
        sessTimeout: 60
        actionOnStartupError: standalone
        ignite:
          k8sServiceName: api-gateway-service
          k8sNamespace: insurance
          discoveryPort: 10100
          communicationPort: 10400 
      users:
          Administrator:
            firstName: "Administrator"
            lastName: "Administrator"
            password: "admin123"
            emailAddresses: [ Administrator@sag.com ]
            active: true
            groups:
            - "Administrators"
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  labels:
    app.kubernetes.io/name: api-gateway-deployment
  annotations:
      prometheus.io/scrape: 'true'    
      prometheus.io/port: '5555'    
spec:
  type: NodePort
  ports:
    - name: http1
      port: 5555
      nodePort: 31000
      protocol: TCP 
    - name: http2
      port: 9072
      nodePort: 31001
      protocol: TCP
    - name: https1
      port: 5543
      targetPort: 35543
      protocol: TCP
    - name: https2
      port: 9073
      targetPort: 39073  
      protocol: TCP
    - name: http3
      port: 10800
      targetPort: 10800  
      protocol: TCP    
    - name: http4
      port: 11211
      targetPort: 11211  
      protocol: TCP        
  selector:
    app: api-gateway-deployment-external-es
  sessionAffinity: ClientIP    


      
